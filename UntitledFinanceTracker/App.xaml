<Application x:Class="UntitledFinanceTracker.Views.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:fa="http://schemas.fontawesome.io/icons/"
             xmlns:ctrl="http://filterdatagrid.control.com/2021"
             xmlns:local="clr-namespace:UntitledFinanceTracker.Views"
             StartupUri="Views/MainWindow.xaml"
    xmlns:theme="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2">
    <Application.Resources>

        <!-- Default font -->
        <Style TargetType="{x:Type TextBlock}">
            <Setter Property="FontFamily" Value="Microsoft JhengHei Light" />
        </Style>

        <Style TargetType="{x:Type Label}">
            <Setter Property="FontSize" Value="14" />
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="Foreground" Value="#ffffff" />
        </Style>

        <!-- Title formatting -->
        <Style x:Key="Title" TargetType="{x:Type TextBlock}">
            <Setter Property="FontSize" Value="20"/>
            <Setter Property="Opacity" Value="0.85"/>
            <Setter Property="Margin" Value="10 0 10 0"/>
            <Setter Property="Foreground" Value="#FFFFFF"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="FontFamily" Value="Microsoft JhengHei Light" />
        </Style>
        
        <!-- Menu formatting -->
        <Style x:Key="Menu" TargetType="{x:Type ListView}">
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Background" Value="#212121"/>
        </Style>

        <!-- Menu item formatting -->
        <Style x:Key="MenuItem" TargetType="{x:Type ListViewItem}">
            <Style.Setters>
                <Setter Property="Height" Value="30"/>
                <Setter Property="Foreground" Value="#ffffff"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ListViewItem}">
                            <Border HorizontalAlignment="{TemplateBinding HorizontalAlignment}" Width="{TemplateBinding Width}"
                                    Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}">
                                <ContentPresenter VerticalAlignment="Center" />
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style.Setters>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#121212" />
                    <Setter Property="Foreground" Value="#A8EAF7" />
                </Trigger>
                <Trigger Property="IsSelected" Value="True">
                    <Setter Property="Background" Value="#121212" />
                    <Setter Property="Foreground" Value="#A8EAF7" />
                </Trigger>
            </Style.Triggers>
        </Style>

        <!-- Menu item formatting -->
        <Style x:Key="SettingsMenuItem" TargetType="{x:Type ListViewItem}" BasedOn="{StaticResource MenuItem}">
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#121212" />
                    <Setter Property="Foreground" Value="#A8EAF7" />
                </Trigger>
                <Trigger Property="IsMouseOver" Value="False">
                    <Setter Property="Background" Value="#212121" />
                    <Setter Property="Foreground" Value="#ffffff" />
                </Trigger>
                
            </Style.Triggers>
        </Style>

        <!-- Navbar formatting -->
        <Style x:Key="Navbar" TargetType="{x:Type ListViewItem}" BasedOn="{StaticResource MenuItem}">
            <Setter Property="Height" Value="auto"/>
            <Setter Property="Margin" Value="0"/>
            <Setter Property="Padding" Value="9 5 15 0"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
        </Style>

        <!-- Account list formatting -->
        <Style x:Key="AccountsList" TargetType="{x:Type ListView}">
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="Background" Value="#212121" />
            
            <!-- Account list item formatting -->
            <Style.Resources>
                <Style TargetType="ListViewItem">
                    <Setter Property="Height" Value="28" />
                    <Setter Property="Padding" Value="0 0 0 0" />
                    <Setter Property="IsEnabled" Value="False" />
                </Style>
            </Style.Resources>
        </Style>


        <!-- Base button formatting -->
        <Style x:Key="btnBase" TargetType="Button">
            <Style.Resources>
            <Style TargetType="Border">
                <Setter Property="CornerRadius" Value="4" />
            </Style>
        </Style.Resources>
        </Style>

        <!-- Add Button formatting -->
        <Style x:Key="btnAdd" TargetType="{x:Type Button}" BasedOn="{StaticResource btnBase}">
            <Setter Property="Grid.Column" Value="1" />
            <Setter Property="Margin" Value="0 5 15 15" />
            <Setter Property="Padding" Value="15 0 15 0" />
            <Setter Property="Background" Value="#8cecff" />
            <Setter Property="Foreground" Value="#30626B" />
            <Setter Property="VerticalAlignment" Value="Top" />
            <Setter Property="HorizontalAlignment" Value="Right" />
            <Setter Property="FontFamily" Value="Microsoft JhengHei Light" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}">
                            <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#3ab6ce" />
                    <Setter Property="Foreground" Value="#cbf7ff" />
                </Trigger>
            </Style.Triggers>
        </Style>

        <!-- Datagrid parent button formatting -->
        <Style x:Key="btnDetailsDg" TargetType="{x:Type Button}" BasedOn="{StaticResource btnBase}">
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="HorizontalAlignment" Value="Center" />
            <Setter Property="OverridesDefaultStyle" Value="True" />
            <Setter Property="FontFamily" Value="Microsoft JhengHei Light" />
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Foreground" Value="#63A7BF" />
                </Trigger>
                <Trigger Property="IsFocused" Value="True">
                    <Setter Property="Foreground" Value="#63A7BF" />
                </Trigger>
            </Style.Triggers>
        </Style>
        <!-- Edit Button Datagrid formatting -->
        <Style x:Key="btnEditDg" TargetType="{x:Type Button}" BasedOn="{StaticResource btnDetailsDg}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}">
                            <fa:ImageAwesome Icon="Pencil" Foreground="{TemplateBinding Foreground}" Width="30" Height="10" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!-- Delete Button Datagrid formatting -->
        <Style x:Key="btnDeleteDg" TargetType="{x:Type Button}" BasedOn="{StaticResource btnDetailsDg}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}">
                            <fa:ImageAwesome Icon="Trash" Foreground="{TemplateBinding Foreground}" Width="30" Height="10" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Foreground" Value="#d64e4d" />
                </Trigger>
                <Trigger Property="IsFocused" Value="True">
                    <Setter Property="Foreground" Value="#d64e4d" />
                </Trigger>
            </Style.Triggers>
        </Style>

        <!-- Update Button Form formatting -->
        <Style x:Key="btnUpdateFrm" TargetType="{x:Type Button}" BasedOn="{StaticResource btnBase}">
            <Setter Property="Width" Value="100" />
            <Setter Property="Height" Value="30" />
            <Setter Property="Margin" Value="10" />
            <Setter Property="FontSize" Value="12" />
            <Setter Property="Background" Value="#8cecff" />
            <Setter Property="Foreground" Value="#30626B" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}">
                            <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#3ab6ce" />
                    <Setter Property="Foreground" Value="#cbf7ff" />
                </Trigger>
            </Style.Triggers>
        </Style>
        <!-- Cancel Button Form formatting -->
        <Style x:Key="btnCancelFrm" TargetType="{x:Type Button}" BasedOn="{StaticResource btnUpdateFrm}">
            <Setter Property="Width" Value="60" />
            <Setter Property="Background" Value="#303030" />
            <Setter Property="Foreground" Value="#ffffff" />
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#b94b4a" />
                    <Setter Property="Foreground" Value="#ffd8d8" />
                </Trigger>
            </Style.Triggers>
        </Style>
        <!-- Import CSV Button Form formatting -->
        <Style x:Key="btnCSVFrm" TargetType="{x:Type Button}" BasedOn="{StaticResource btnCancelFrm}">
            <Setter Property="Width" Value="120" />
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#52b94a" />
                    <Setter Property="Foreground" Value="#dbffd8" />
                </Trigger>
            </Style.Triggers>
        </Style>

        <!-- TextBox formatting -->
        <Style TargetType="{x:Type TextBox}">
            <Setter Property="Width" Value="180" />
            <Setter Property="Height" Value="30" />
            <Setter Property="Background" Value="#303030" />
            <Setter Property="Foreground" Value="#ffffff" />
            <Setter Property="BorderBrush" Value="#404040" />
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="FontFamily" Value="Microsoft JhengHei Light" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBox}">
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}">
                            <ScrollViewer x:Name="PART_ContentHost" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="BorderBrush" Value="#63A7BF" />
                </Trigger>
                <Trigger Property="IsFocused" Value="True">
                    <Setter Property="BorderBrush" Value="#63A7BF" />
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style TargetType="{x:Type DatePicker}">
            <Style.Resources>
                <Style TargetType="{x:Type DatePickerTextBox}">
                    <Setter Property="Background" Value="#202020"/>
                    <Setter Property="BorderThickness" Value="0"/>
                </Style>
            </Style.Resources>
            <Setter Property="Width" Value="180" />
            <Setter Property="Height" Value="30" />
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="BorderBrush" Value="#404040" />
            <Setter Property="Foreground" Value="#ffffff" />
            <Setter Property="Background" Value="#303030" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
        </Style>
        
        <!-- DataGrid formatting -->
        <Style TargetType="{x:Type DataGrid}">
            <Setter Property="RowHeight" Value="30" />
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="Margin" Value="10 0 10 10" />
            <Setter Property="SelectionMode" Value="Single" />
            <Setter Property="HeadersVisibility" Value="Column" />
            <Setter Property="GridLinesVisibility" Value="None" />
            <Setter Property="IsReadOnly" Value="True" />
            <Setter Property="CanUserAddRows" Value="False" />
            <Setter Property="CanUserDeleteRows" Value="False" />
            <Setter Property="CanUserResizeRows" Value="False" />
            <Setter Property="CanUserSortColumns" Value="False" />
            <Setter Property="AutoGenerateColumns" Value="False" />
            <Setter Property="Background" Value="#212121" />
            <Setter Property="Foreground" Value="#ffffff" />
            <Setter Property="RowBackground" Value="#212121" />
            <Setter Property="AlternatingRowBackground" Value="#292929" />
        </Style>
        <!-- centered column header formatting -->
        <Style x:Key="dgCenter" TargetType="{x:Type DataGridColumnHeader}">
            <Setter Property="Height" Value="30" />
            <Setter Property="FontSize" Value="12" />
            <Setter Property="FontWeight" Value="Bold" />
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="Background" Value="#1A1A1A" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
                        <Grid Background="{TemplateBinding Background}">
                            <TextBlock FontFamily="Microsoft JhengHei" Text="{TemplateBinding Content}" VerticalAlignment="Center" HorizontalAlignment="Center" />
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!-- left aligned column header formatting -->
        <Style TargetType="{x:Type DataGridColumnHeader}" BasedOn="{StaticResource dgCenter}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
                        <Grid Background="{TemplateBinding Background}">
                            <TextBlock FontFamily="Microsoft JhengHei" Text="{TemplateBinding Content}" Padding="5 0 0 0" VerticalAlignment="Center" />
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!-- right aligned column header formatting -->
        <Style x:Key="dgRight" TargetType="{x:Type DataGridColumnHeader}" BasedOn="{StaticResource dgCenter}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
                        <Grid Background="{TemplateBinding Background}" Margin="0 0 10 0">
                            <TextBlock FontFamily="Microsoft JhengHei" Text="{TemplateBinding Content}" VerticalAlignment="Center" HorizontalAlignment="Right" />
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!-- DataGrid row formatting -->
        <Style TargetType="{x:Type DataGridRow}">
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#121212" />
                    <Setter Property="Foreground" Value="#A8EAF7" />
                </Trigger>
                <Trigger Property="IsSelected" Value="True">
                    <Setter Property="Background" Value="#121212" />
                </Trigger>
            </Style.Triggers>
        </Style>
        <!-- Right algined DataGrid cell formatting -->
        <Style x:Key="dgCellRight" TargetType="{x:Type DataGridCell}">
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="FontSize" Value="11" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type DataGridCell}">
                        <Border Background="{TemplateBinding Background}" Padding="0 0 10 0">
                            <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Right"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#121212" />
                    <Setter Property="Foreground" Value="#A8EAF7" />
                </Trigger>
                <Trigger Property="IsSelected" Value="True">
                    <Setter Property="Background" Value="#121212" />
                    <Setter Property="Foreground" Value="#A8EAF7" />
                </Trigger>
            </Style.Triggers>
        </Style>
        <!-- DataGrid cell formatting -->
        <Style TargetType="{x:Type DataGridCell}" BasedOn="{StaticResource dgCellRight}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type DataGridCell}">
                        <Border Background="{TemplateBinding Background}" Padding="5 0 0 0">
                            <ContentPresenter VerticalAlignment="Center" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- StackPanel formatting -->
        <Style x:Key="spForm" TargetType="{x:Type StackPanel}">
            <Setter Property="Margin" Value="10 0 10 5" />
            <Setter Property="VerticalAlignment" Value="Top" />
            <Setter Property="HorizontalAlignment" Value="Center" />
            <Setter Property="Orientation" Value="Vertical" />
        </Style>

        <!-- ComboBox formatting -->
        <Style TargetType="{x:Type ComboBox}">
            <Setter Property="Width" Value="180" />
            <Setter Property="Height" Value="30" />
            <Setter Property="Foreground" Value="#ffffff" />
            <Setter Property="IsEditable" Value="False" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
        </Style>
        <!-- ComboBox formatting -->
        <Style TargetType="{x:Type ComboBoxItem}">
            <Setter Property="Foreground" Value="#ffffff" />
            <Setter Property="Background" Value="#202020" />
            <Setter Property="Padding" Value="5 2 5 2" />
            <Setter Property="BorderThickness" Value="0" />
        </Style>
        
        <!-- Stupid ComboBox template -->
        <SolidColorBrush x:Key="ComboBox.Static.Background" Color="#303030"/>
        <SolidColorBrush x:Key="ComboBox.Static.Border" Color="#404040"/>
        <SolidColorBrush x:Key="ComboBox.Static.Glyph" Color="#A8EAF7"/>
        <SolidColorBrush x:Key="ComboBox.Static.Editable.Background" Color="#303030"/>
        <SolidColorBrush x:Key="ComboBox.Static.Editable.Border" Color="#404040"/>
        <SolidColorBrush x:Key="ComboBox.Static.Editable.Button.Background" Color="Transparent"/>
        <SolidColorBrush x:Key="ComboBox.Static.Editable.Button.Border" Color="Transparent"/>
        <SolidColorBrush x:Key="ComboBox.MouseOver.Background" Color="#202020" />
        <SolidColorBrush x:Key="ComboBox.MouseOver.Border" Color="#63A7BF"/>
        <SolidColorBrush x:Key="ComboBox.MouseOver.Glyph" Color="#63A7BF"/>
        <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Background" Color="#303030"/>
        <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Border" Color="#404040"/>
        <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Button.Background" Color="#303030" />
        <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Button.Border" Color="#404040"/>
        <SolidColorBrush x:Key="ComboBox.Pressed.Background" Color="#202020" />
        <SolidColorBrush x:Key="ComboBox.Pressed.Border" Color="#63A7BF"/>
        <SolidColorBrush x:Key="ComboBox.Pressed.Glyph" Color="#63A7BF"/>
        <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Background" Color="#202020"/>
        <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Border" Color="#63A7BF"/>
        <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Button.Background" Color="#202020" />
        <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Button.Border" Color="#63A7BF"/>
        <SolidColorBrush x:Key="ComboBox.Disabled.Background" Color="#FFF0F0F0"/>
        <SolidColorBrush x:Key="ComboBox.Disabled.Border" Color="#FFD9D9D9"/>
        <SolidColorBrush x:Key="ComboBox.Disabled.Glyph" Color="#FFBFBFBF"/>
        <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Background" Color="#FFFFFFFF"/>
        <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Border" Color="#FFBFBFBF"/>
        <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Button.Background" Color="Transparent"/>
        <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Button.Border" Color="Transparent"/>
        <Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="IsTabStop" Value="false"/>
            <Setter Property="Focusable" Value="false"/>
            <Setter Property="ClickMode" Value="Press"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border x:Name="templateRoot" Background="{StaticResource ComboBox.Static.Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{StaticResource ComboBox.Static.Border}" SnapsToDevicePixels="true">
                            <Border x:Name="splitBorder" BorderThickness="1" BorderBrush="Transparent" HorizontalAlignment="Right" Margin="0" SnapsToDevicePixels="true" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
                                <Path x:Name="arrow" Data="F1 M 0,0 L 2.667,2.66665 L 5.3334,0 L 5.3334,-1.78168 L 2.6667,0.88501 L0,-1.78168 L0,0 Z" Fill="{StaticResource ComboBox.Static.Glyph}" HorizontalAlignment="Center" Margin="0" VerticalAlignment="Center"/>
                            </Border>
                        </Border>
                        <ControlTemplate.Triggers>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="false"/>
                                    <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="false"/>
                                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="true"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Static.Editable.Background}"/>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Static.Editable.Border}"/>
                                <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.Static.Editable.Button.Background}"/>
                                <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.Static.Editable.Button.Border}"/>
                            </MultiDataTrigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Fill" TargetName="arrow" Value="{StaticResource ComboBox.MouseOver.Glyph}"/>
                            </Trigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Background}"/>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Border}"/>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Editable.Background}"/>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Editable.Border}"/>
                                <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.MouseOver.Editable.Button.Background}"/>
                                <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.MouseOver.Editable.Button.Border}"/>
                            </MultiDataTrigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Fill" TargetName="arrow" Value="{StaticResource ComboBox.Pressed.Glyph}"/>
                            </Trigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Background}"/>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Border}"/>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Editable.Background}"/>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Editable.Border}"/>
                                <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.Pressed.Editable.Button.Background}"/>
                                <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.Pressed.Editable.Button.Border}"/>
                            </MultiDataTrigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Fill" TargetName="arrow" Value="{StaticResource ComboBox.Disabled.Glyph}"/>
                            </Trigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Background}"/>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Border}"/>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Editable.Background}"/>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Editable.Border}"/>
                                <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.Disabled.Editable.Button.Background}"/>
                                <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.Disabled.Editable.Button.Border}"/>
                            </MultiDataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <ControlTemplate x:Key="ComboBoxTemplate" TargetType="{x:Type ComboBox}">
            <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
                </Grid.ColumnDefinitions>
                <Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" Placement="Bottom"
                       PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                    <theme:SystemDropShadowChrome x:Name="shadow" Color="Transparent" MinWidth="{Binding ActualWidth, ElementName=templateRoot}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                        <Border x:Name="dropDownBorder" Background="#202020" BorderThickness="1" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}">
                            <ScrollViewer x:Name="DropDownScrollViewer">
                                <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                    <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                        <Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                    </Canvas>
                                    <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                </Grid>
                            </ScrollViewer>
                        </Border>
                    </theme:SystemDropShadowChrome>
                </Popup>
                <ToggleButton x:Name="toggleButton" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Grid.ColumnSpan="2"
                              IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxToggleButton}"/>
                <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" Content="{TemplateBinding SelectionBoxItem}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                  ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="false" Margin="{TemplateBinding Padding}"
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                    <Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
                    <Setter Property="Color" TargetName="shadow" Value="#71000000"/>
                </Trigger>
                <Trigger Property="HasItems" Value="false">
                    <Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
                </Trigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsGrouping" Value="true"/>
                        <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                </MultiTrigger>
                <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                    <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                    <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
    </Application.Resources>
</Application>
